<?xml version="1.0" encoding="utf-8"?>
<Grammar name="tilespace" type="tilegrid" findFirst="true">
  <Constraints>
    <Constraint name="constraint_tempCorridor" active="true" findFirst="false">
      <GrammarCondition>CountElements("Has(#tempCorridor)","==",0)</GrammarCondition>
      <Rules>
        <Rule priority="3" probability="1" name="fillInWalls">
          <RuleCondition>Not(CheckAttribute(grammar.constraint_tempCorridor, stage, floor) || CheckAttribute(grammar.constraint_tempCorridor, stage, corners))</RuleCondition>
          <Query>constraint_tempCorridor_wall_query</Query>
          <Target>constraint_tempCorridor_wall_target</Target>
        </Rule>
        <Rule priority="2" probability="1" name="fillInCorners">
          <RuleCondition>Not(CheckAttribute(grammar.constraint_tempCorridor, stage, floor))</RuleCondition>
          <Query>constraint_tempCorridor_corner_query</Query>
          <Target>constraint_tempCorridor_corner_target</Target>
          <RuleAction>SetAttribute(grammar.constraint_tempCorridor, stage, corners)</RuleAction>
        </Rule>
        <Rule priority="1" probability="1" name="fillInCorners2">
          <RuleCondition>Not(CheckAttribute(grammar.constraint_tempCorridor, stage, floor))</RuleCondition>
          <Query>constraint_tempCorridor_corner_2_query</Query>
          <Target>constraint_tempCorridor_corner_2_target</Target>
          <RuleAction>SetAttribute(grammar.constraint_tempCorridor, stage, corners)</RuleAction>
        </Rule>
        <Rule priority="0" probability="1" name="fillInFloor">
          <Query>constraint_tempCorridor_floor_query</Query>
          <Target>constraint_tempCorridor_floor_target</Target>
          <RuleAction>SetAttribute(grammar.constraint_tempCorridor, stage, floor)</RuleAction>
        </Rule>
      </Rules>
    </Constraint>
  </Constraints>
  <Rules>
    <Initial probability="1" name="initial_startroom">
      <RuleCondition>TraverserMatch("graphspace_traverser","start")</RuleCondition>
      <Target>initial_startroom</Target>
      <!-- <RuleAction>TraverserNext("graphspace_traverser",,,)</RuleAction> -->
    </Initial>
    <Rule priority="1" probability="0.1" name="bigroom">
      <RuleCondition>TraverserMatch("graphspace_traverser","bigroom")</RuleCondition>
      <Query>bigroom_query</Query>
      <Target>bigroom_target</Target>
      <RuleAction>TraverserNext("graphspace_traverser",graphspace_traverser_query_1,,)</RuleAction>
    </Rule>
    <Rule priority="1" probability="0.1" name="corridor">
      <RuleCondition>TraverserMatch("graphspace_traverser","corridor")</RuleCondition>
      <Query>corridor_query</Query>
      <Target>corridor_target</Target>
      <RuleAction>TraverserNext("graphspace_traverser",graphspace_traverser_query_1,,)</RuleAction>
    </Rule>
    <Rule priority="1" probability="0.9" name="lock_one_way">
      <RuleCondition>TraverserMatch("graphspace_traverser","lock_one_way")</RuleCondition>
      <Query>lock_one_way_query</Query>
      <Target>lock_one_way_target</Target>
      <RuleAction>TraverserNext("graphspace_traverser",graphspace_traverser_query_1,,)</RuleAction>
    </Rule>
    <Rule priority="1" probability="0.1" name="lockroom">
      <RuleCondition>TraverserMatch("graphspace_traverser","lockroom")</RuleCondition>
      <Query>bigroom_query</Query>
      <Target>lockroom_target</Target>
      <RuleAction>TraverserNext("graphspace_traverser",graphspace_traverser_query_1,,)</RuleAction>
    </Rule>
    <Rule priority="0" probability="0.1" name="normal">
      <RuleCondition>TraverserMatch("graphspace_traverser","normal")</RuleCondition>
      <Query>normal_query</Query>
      <Target>normal_target</Target>
      <RuleAction>TraverserNext("graphspace_traverser",graphspace_traverser_query_1,,)</RuleAction>
    </Rule>
    <!-- Mission element rules -->
    <Rule priority="3" probability="0.1" name="mission_enemy">
      <RuleCondition>TraverserFreeMatch("mission_traverser","t_enemy")</RuleCondition>
      <Query>mission_query</Query>
      <Target>mission_enemy_target</Target>
    </Rule>
    <Rule priority="3" probability="0.1" name="mission_treasure">
      <RuleCondition>TraverserFreeMatch("mission_traverser","t_treasure")</RuleCondition>
      <Query>mission_query</Query>
      <Target>mission_treasure_target</Target>
    </Rule>
    <Rule priority="3" probability="0.1" name="mission_key">
      <RuleCondition>TraverserFreeMatch("mission_traverser","t_key")</RuleCondition>
      <Query>mission_query</Query>
      <Target>mission_key_target</Target>
    </Rule>
    <Rule priority="3" probability="0.1" name="mission_lock">
      <RuleCondition>TraverserFreeMatch("mission_traverser","t_lock")</RuleCondition>
      <Query>mission_lock_query</Query>
      <Target>mission_lock_target</Target>
    </Rule>
    <Rule priority="3" probability="0.1" name="mission_boss">
      <RuleCondition>TraverserFreeMatch("mission_traverser","t_boss")</RuleCondition>
      <Query>mission_query</Query>
      <Target>mission_boss_target</Target>
    </Rule>
    <Rule priority="3" probability="0.1" name="mission_start">
      <RuleCondition>TraverserFreeMatch("mission_traverser","t_start")</RuleCondition>
      <Query>mission_door_query</Query>
      <Target>mission_start_target</Target>
    </Rule>
    <Rule priority="3" probability="0.1" name="mission_end">
      <RuleCondition>TraverserFreeMatch("mission_traverser","t_end")</RuleCondition>
      <Query>mission_door_query</Query>
      <Target>mission_end_target</Target>
    </Rule>
    <!-- Connection rules -->
    <Rule priority="2" probability="0.1" name="normal_connect">
      <RuleCondition>TraverserMatch("graphspace_traverser","normal_connect")</RuleCondition>
      <RuleAction>RuleFind("normal_connect_1")</RuleAction>
      <RuleAction>RuleFind("normal_connect_2")</RuleAction>
      <RuleAction>SetConditionResult("endsFound", RuleFound("normal_connect_1") &amp;&amp; RuleFound("normal_connect_2"))</RuleAction>
      <RuleAction>ConditionedAction(CheckAttribute(,"endsFound", "true"), RuleApply("normal_connect_3"))</RuleAction>
    </Rule>
    <Rule priority="-1" probability="0.1" name="normal_connect_1" active="false">
      <Query>normal_connect_query_1</Query>
      <Target>normal_connect_target_1</Target>
    </Rule>
    <Rule priority="-1" probability="0.1" name="normal_connect_2" active="false">
      <Query>normal_connect_query_2</Query>
      <Target>normal_connect_target_2</Target>
    </Rule>
    <Rule priority="-1" probability="0.1" name="normal_connect_3" active="false">
      <RuleAction>CopyAttribute(grammar.normal_connect_1.matches.0_0, this,,startpoint)</RuleAction>
      <RuleAction>CopyAttribute(grammar.normal_connect_2.matches.3_0, this,,endpoint)</RuleAction>
      <RuleAction>CopyAttribute(grammar.normal_connect_1.matches.1_0, this,,startpoint_2)</RuleAction>
      <RuleAction>CopyAttribute(grammar.normal_connect_2.matches.2_0, this,,endpoint_2)</RuleAction>
      <RuleAction>RuleTransform("normal_connect_1")</RuleAction>
      <RuleAction>RuleTransform("normal_connect_2")</RuleAction>
      <RuleAction>CreatePath(startpoint, endpoint, startpoint_2, endpoint_2, 4, tempCorridor, true)</RuleAction>
      <RuleAction>SetAttribute(grammar.constraint_tempCorridor, stage, walls)</RuleAction>
      <RuleAction>TraverserNext("graphspace_traverser",grammar.normal_connect.graphspace_traverser_query_1,,)</RuleAction>
    </Rule>
  </Rules>
  <Listeners>
    <Listener alias="controller">controller</Listener>
    <Listener>graphspace_traverser</Listener>
    <Listener>mission_traverser</Listener>
  </Listeners>
</Grammar>